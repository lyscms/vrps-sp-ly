<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sunkl.my.common.dao.SysRolePermissionRelationMapper">
  <resultMap id="BaseResultMap" type="com.sunkl.my.common.model.SysRolePermissionRelation">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="role_id" jdbcType="VARCHAR" property="roleId" />
    <result column="permission_id" jdbcType="VARCHAR" property="permissionId" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Base_Column_List">
    id, role_id, permission_id, create_by, create_time, update_by, update_time, remark
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_sys_role_permission_relation
    where id = #{id,jdbcType=VARCHAR}
    order by create_time desc
  </select>

  <select id="selectSelective" parameterType="com.sunkl.my.common.model.SysRolePermissionRelation" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_sys_role_permission_relation
    <where>
      <if test="id != null">
        and id = #{id,jdbcType=VARCHAR}
      </if>
      <if test="roleId != null">
        and role_id = #{roleId,jdbcType=VARCHAR}
      </if>
      <if test="permissionId != null">
        and permission_id = #{permissionId,jdbcType=VARCHAR}
      </if>
    </where>
    order by create_time desc
  </select>

  <select id="selectByRoleIds" parameterType="java.util.List" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_sys_role_permission_relation
    <where>
      <if test="roleIds != null and roleIds.size()>0">
        and role_id in
        <foreach collection="roleIds" item="item" open="(" close=")" separator=",">
          #{item}
        </foreach>
      </if>
    </where>
    order by create_time desc
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from t_sys_role_permission_relation
    where id = #{id,jdbcType=VARCHAR}
  </delete>

  <delete id="deleteSelective" parameterType="java.lang.String">
    delete from t_sys_role_permission_relation
    <where>
      <if test="id != null">
        and id = #{id,jdbcType=VARCHAR}
      </if>
      <if test="roleId != null">
        and role_id = #{roleId,jdbcType=VARCHAR}
      </if>
      <if test="permissionId != null">
        and permission_id = #{permissionId,jdbcType=VARCHAR}
      </if>
    </where>
  </delete>

  <insert id="insert" parameterType="com.sunkl.my.common.model.SysRolePermissionRelation">
    insert into t_sys_role_permission_relation (id, role_id, permission_id, 
      create_by, create_time, update_by, 
      update_time, remark)
    values (#{id,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR}, #{permissionId,jdbcType=VARCHAR}, 
      #{createBy,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR})
  </insert>

  <insert id="insertSelective" parameterType="com.sunkl.my.common.model.SysRolePermissionRelation">
    insert into t_sys_role_permission_relation
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="permissionId != null">
        permission_id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateBy != null">
        update_by,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null">
        #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sunkl.my.common.model.SysRolePermissionRelation">
    update t_sys_role_permission_relation
    <set>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=VARCHAR},
      </if>
      <if test="permissionId != null">
        permission_id = #{permissionId,jdbcType=VARCHAR},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sunkl.my.common.model.SysRolePermissionRelation">
    update t_sys_role_permission_relation
    set role_id = #{roleId,jdbcType=VARCHAR},
      permission_id = #{permissionId,jdbcType=VARCHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>